// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectef;

#nullable disable

namespace projectef.Migrations
{
    [DbContext(typeof(TaskContext))]
    [Migration("20230524135335_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projectef.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EffortGrade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("78f16f43-1ed2-4286-a27f-0a8786705efc"),
                            EffortGrade = 20,
                            Name = "Pending Activities"
                        },
                        new
                        {
                            CategoryId = new Guid("78f16f43-1ed2-4286-a27f-0a8786705e02"),
                            EffortGrade = 50,
                            Name = "Personal Activities"
                        });
                });

            modelBuilder.Entity("projectef.Models.ToDo", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TaskId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Todo", (string)null);

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("78f16f43-1ed2-4286-a27f-0a8786705e10"),
                            CategoryId = new Guid("78f16f43-1ed2-4286-a27f-0a8786705efc"),
                            CreatedTime = new DateTime(2023, 5, 24, 8, 53, 35, 785, DateTimeKind.Local).AddTicks(2531),
                            Priority = 1,
                            Title = "Pay Bills"
                        },
                        new
                        {
                            TaskId = new Guid("78f16f43-1ed2-4286-a27f-0a8786705e11"),
                            CategoryId = new Guid("78f16f43-1ed2-4286-a27f-0a8786705e02"),
                            CreatedTime = new DateTime(2023, 5, 24, 8, 53, 35, 785, DateTimeKind.Local).AddTicks(2578),
                            Priority = 0,
                            Title = "Watch movie on netflix"
                        });
                });

            modelBuilder.Entity("projectef.Models.ToDo", b =>
                {
                    b.HasOne("projectef.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("projectef.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
